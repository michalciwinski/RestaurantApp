// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RestaurantApp.Entities;

#nullable disable

namespace RestaurantApp.Migrations
{
    [DbContext(typeof(RestaurantDbContext))]
    partial class RestaurantDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RestaurantApp.Entities.TDishType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TDishType");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<int>("TDishTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TDishTypeId");

                    b.ToTable("TMenu");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalComment")
                        .HasColumnType("text");

                    b.Property<int>("Bill")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateOfOrder")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<int>("TStateId")
                        .HasColumnType("integer");

                    b.Property<int>("TUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TStateId");

                    b.HasIndex("TUserId");

                    b.ToTable("TOrder");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TOrderPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TMenuId")
                        .HasColumnType("integer");

                    b.Property<int>("TOrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TMenuId");

                    b.HasIndex("TOrderId");

                    b.ToTable("TOrderPosition");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TState");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("QR")
                        .HasColumnType("text");

                    b.Property<int>("TUserTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserTypeId");

                    b.ToTable("TUser");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TUserType");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TMenu", b =>
                {
                    b.HasOne("RestaurantApp.Entities.TDishType", "TDishType")
                        .WithMany("TMenu")
                        .HasForeignKey("TDishTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TDishType");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TOrder", b =>
                {
                    b.HasOne("RestaurantApp.Entities.TState", "TState")
                        .WithMany("TOrder")
                        .HasForeignKey("TStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Entities.TUser", "TUser")
                        .WithMany("TOrder")
                        .HasForeignKey("TUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TState");

                    b.Navigation("TUser");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TOrderPosition", b =>
                {
                    b.HasOne("RestaurantApp.Entities.TMenu", "TMenu")
                        .WithMany("TOrderPosition")
                        .HasForeignKey("TMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RestaurantApp.Entities.TOrder", "TOrder")
                        .WithMany("TOrderPosition")
                        .HasForeignKey("TOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TMenu");

                    b.Navigation("TOrder");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TUser", b =>
                {
                    b.HasOne("RestaurantApp.Entities.TUserType", "TUserType")
                        .WithMany("TUser")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TUserType");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TDishType", b =>
                {
                    b.Navigation("TMenu");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TMenu", b =>
                {
                    b.Navigation("TOrderPosition");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TOrder", b =>
                {
                    b.Navigation("TOrderPosition");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TState", b =>
                {
                    b.Navigation("TOrder");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TUser", b =>
                {
                    b.Navigation("TOrder");
                });

            modelBuilder.Entity("RestaurantApp.Entities.TUserType", b =>
                {
                    b.Navigation("TUser");
                });
#pragma warning restore 612, 618
        }
    }
}
